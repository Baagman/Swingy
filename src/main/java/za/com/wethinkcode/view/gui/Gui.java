package za.com.wethinkcode.view.gui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import lombok.Getter;
import lombok.Setter;
import za.com.wethinkcode.contoller.Controller;
import za.com.wethinkcode.model.artefacts.Artefact;
import za.com.wethinkcode.model.characters.Hero;
import za.com.wethinkcode.model.characters.Villain;
import za.com.wethinkcode.model.coordinates.Coordinates;
import za.com.wethinkcode.model.util.Database;

/**
 * @author tbaagman
 */
@Getter
@Setter
public class Gui extends javax.swing.JFrame {

    private Controller controller;
    private Hero hero;
    private int mapSize;
    private StringBuilder map;
    private ArrayList<Villain> villains;
    private Villain villainEncounter;
    private Coordinates previousCoordinates;
    private Artefact droppedArtefact;

    /**
     * Creates new form newGui
     *
     * @param database
     */
    public Gui(Database database) {
        initComponents();
        this.controller = new Controller(database);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel();
        btnContainer = new javax.swing.JPanel();
        selectExsitingHero = new javax.swing.JButton();
        createNewHeroBtn = new javax.swing.JButton();
        exitGame = new javax.swing.JButton();
        createNewHeroPanel = new javax.swing.JPanel();
        javax.swing.JLabel heroNameLabel = new javax.swing.JLabel();
        heroName = new javax.swing.JTextField();
        warriorCheckBox = new javax.swing.JCheckBox();
        hunterCheckBox = new javax.swing.JCheckBox();
        priestCheckBox = new javax.swing.JCheckBox();
        final javax.swing.JLabel heroClassLabel = new javax.swing.JLabel();
        startGameBtn = new javax.swing.JButton();
        availableHeroPanel = new javax.swing.JPanel();
        statsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableHeroStats = new javax.swing.JTextArea();
        availableHeroes = new javax.swing.JComboBox<String>();
        playGameBtn = new javax.swing.JButton();
        mapPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mapTextArea = new javax.swing.JTextArea();
        movementBtnPanel = new javax.swing.JPanel();
        southBtn = new javax.swing.JButton();
        northBtn = new javax.swing.JButton();
        westBtn = new javax.swing.JButton();
        eastBtn = new javax.swing.JButton();
        battleBtnPanel = new javax.swing.JPanel();
        fightBtn = new javax.swing.JButton();
        runBtn = new javax.swing.JButton();
        enemyStats = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        enemyStatsTextArea = new javax.swing.JTextArea();
        pickUpArtefactBtn = new javax.swing.JButton();
        leaveArtefactBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        selectExsitingHero.setText("Select Exsiting Hero");
        selectExsitingHero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectExsitingHeroActionPerformed(evt);
            }
        });

        createNewHeroBtn.setText("Create New Hero");
        createNewHeroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewHeroBtnActionPerformed(evt);
            }
        });

        exitGame.setText("Exit Game");
        exitGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnContainerLayout = new javax.swing.GroupLayout(btnContainer);
        btnContainer.setLayout(btnContainerLayout);
        btnContainerLayout.setHorizontalGroup(
            btnContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectExsitingHero)
                    .addComponent(createNewHeroBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitGame, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        btnContainerLayout.setVerticalGroup(
            btnContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnContainerLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(selectExsitingHero, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNewHeroBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitGame, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        heroNameLabel.setText("Hero Name :");

        warriorCheckBox.setText("Warrior");
        warriorCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                heroClassCheckBoxItemStateChanged(evt);
            }
        });

        hunterCheckBox.setText("Hunter");
        hunterCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                heroClassCheckBoxItemStateChanged(evt);
            }
        });

        priestCheckBox.setText("Priest");
        priestCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                heroClassCheckBoxItemStateChanged(evt);
            }
        });

        heroClassLabel.setText("Hero Class:");

        startGameBtn.setText("Start Game");
        startGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameBtnActionPerformed(evt);
            }
        });

        createNewHeroPanel.setVisible(false);

        javax.swing.GroupLayout createNewHeroPanelLayout = new javax.swing.GroupLayout(createNewHeroPanel);
        createNewHeroPanel.setLayout(createNewHeroPanelLayout);
        createNewHeroPanelLayout.setHorizontalGroup(
            createNewHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createNewHeroPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(createNewHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(heroClassLabel)
                    .addComponent(warriorCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hunterCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priestCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(132, 132, 132))
            .addGroup(createNewHeroPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(createNewHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(createNewHeroPanelLayout.createSequentialGroup()
                        .addComponent(heroNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(heroName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        createNewHeroPanelLayout.setVerticalGroup(
            createNewHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createNewHeroPanelLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(createNewHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heroNameLabel)
                    .addComponent(heroName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(heroClassLabel)
                .addGap(4, 4, 4)
                .addComponent(warriorCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hunterCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priestCheckBox)
                .addGap(18, 18, 18)
                .addComponent(startGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        startGameBtn.setVisible(false);

        availableHeroStats.setColumns(20);
        availableHeroStats.setRows(5);
        jScrollPane1.setViewportView(availableHeroStats);
        availableHeroStats.setEditable(false);

        availableHeroes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                availableHeroesItemStateChanged(evt);
            }
        });

        playGameBtn.setText("Play");
        playGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playGameBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statsPanelLayout = new javax.swing.GroupLayout(statsPanel);
        statsPanel.setLayout(statsPanelLayout);
        statsPanelLayout.setHorizontalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(availableHeroes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(playGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statsPanelLayout.setVerticalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statsPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(availableHeroes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout availableHeroPanelLayout = new javax.swing.GroupLayout(availableHeroPanel);
        availableHeroPanel.setLayout(availableHeroPanelLayout);
        availableHeroPanelLayout.setHorizontalGroup(
            availableHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, availableHeroPanelLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(statsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        availableHeroPanelLayout.setVerticalGroup(
            availableHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        mapTextArea.setColumns(20);
        mapTextArea.setRows(5);
        jScrollPane2.setViewportView(mapTextArea);
        mapTextArea.setEditable(false);

        southBtn.setText("South");
        southBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movementBtnActionPerformed(evt);
            }
        });

        northBtn.setText("North");
        northBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movementBtnActionPerformed(evt);
            }
        });

        westBtn.setText("West");
        westBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movementBtnActionPerformed(evt);
            }
        });

        eastBtn.setText("East");
        eastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movementBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout movementBtnPanelLayout = new javax.swing.GroupLayout(movementBtnPanel);
        movementBtnPanel.setLayout(movementBtnPanelLayout);
        movementBtnPanelLayout.setHorizontalGroup(
            movementBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movementBtnPanelLayout.createSequentialGroup()
                .addGroup(movementBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(movementBtnPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(westBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(eastBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(movementBtnPanelLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(northBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(movementBtnPanelLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(southBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        movementBtnPanelLayout.setVerticalGroup(
            movementBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movementBtnPanelLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(northBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(movementBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(westBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eastBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(southBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fightBtn.setText("Fight");
        fightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                battleBtnActionPerformed(evt);
            }
        });

        runBtn.setText("Run");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                battleBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout battleBtnPanelLayout = new javax.swing.GroupLayout(battleBtnPanel);
        battleBtnPanel.setLayout(battleBtnPanelLayout);
        battleBtnPanelLayout.setHorizontalGroup(
            battleBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(battleBtnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(battleBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fightBtn)
                    .addComponent(runBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        battleBtnPanelLayout.setVerticalGroup(
            battleBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(battleBtnPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(fightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(movementBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(battleBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(battleBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(movementBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        battleBtnPanel.setVisible(false);

        enemyStatsTextArea.setColumns(20);
        enemyStatsTextArea.setRows(5);
        jScrollPane3.setViewportView(enemyStatsTextArea);
        enemyStatsTextArea.setEditable(false);

        pickUpArtefactBtn.setText("Pick Up Artefact");
        pickUpArtefactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                droppedArtefactBtnActionPerformed(evt);
            }
        });

        leaveArtefactBtn.setText("Leave Atefact");
        leaveArtefactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                droppedArtefactBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout enemyStatsLayout = new javax.swing.GroupLayout(enemyStats);
        enemyStats.setLayout(enemyStatsLayout);
        enemyStatsLayout.setHorizontalGroup(
            enemyStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, enemyStatsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
            .addGroup(enemyStatsLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(enemyStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leaveArtefactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pickUpArtefactBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        enemyStatsLayout.setVerticalGroup(
            enemyStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(pickUpArtefactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leaveArtefactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pickUpArtefactBtn.setVisible(false);
        leaveArtefactBtn.setVisible(false);

        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNewHeroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(availableHeroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enemyStats, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        containerPanelLayout.setVerticalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enemyStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createNewHeroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availableHeroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        availableHeroPanel.setVisible(false);
        mapPanel.setVisible(false);
        enemyStats.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(containerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(containerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void exitGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitGameActionPerformed

            System.exit(0);
	}//GEN-LAST:event_exitGameActionPerformed

	private void createNewHeroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewHeroBtnActionPerformed

            createNewHeroPanel.setVisible(true);
            createNewHeroBtn.setVisible(false);
            selectExsitingHero.setVisible(false);
            startGameBtn.setVisible(true);
            pack();
	}//GEN-LAST:event_createNewHeroBtnActionPerformed

	private void selectExsitingHeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectExsitingHeroActionPerformed

            final ResultSet heroesAvailableFromDatabase;
            ArrayList<String> heroesAvailable = new ArrayList<>();
            try {
                heroesAvailableFromDatabase = controller.getAvailableHeroes();
                while (heroesAvailableFromDatabase.next()) {
                    heroesAvailable.add(heroesAvailableFromDatabase.getString("name"));
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "",
                        JOptionPane.ERROR_MESSAGE);
            }
            if (!heroesAvailable.isEmpty()) {
                for (String Name : heroesAvailable) {
                    availableHeroes.addItem(Name);
                }
                availableHeroPanel.setVisible(true);
                createNewHeroBtn.setVisible(false);
                selectExsitingHero.setVisible(false);
                playGameBtn.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this,
                        "No Available Heroes Please Create A New Hero",
                        "No Heroes Available",
                        JOptionPane.ERROR_MESSAGE);
                selectExsitingHero.setVisible(false);
            }
            pack();
	}//GEN-LAST:event_selectExsitingHeroActionPerformed

	private void availableHeroesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_availableHeroesItemStateChanged

            ResultSet selectedHero = null;
            StringBuilder heroStats = new StringBuilder();

            try {
                selectedHero = controller.selectHero(evt.getItem().toString());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "",
                        JOptionPane.ERROR_MESSAGE);
            }
            if (selectedHero != null) {
                try {
                    heroStats.append(" Hero Name: " + selectedHero.getString("name"));
                    heroStats.append("\n");
                    heroStats.append(" Hero Class: " + selectedHero.getString("heroclass"));
                    heroStats.append("\n");
                    heroStats.append(" Armor: " + selectedHero.getString("armor"));
                    heroStats.append("\n");
                    heroStats.append(" Weapon: " + selectedHero.getString("weapon"));
                    heroStats.append("\n");
	                heroStats.append(" Helm: " + selectedHero.getString("helm"));
                    heroStats.append("\n");
                    heroStats.append(" Attack Points: " + selectedHero.getInt("attack"));
                    heroStats.append("\n");
                    heroStats.append(" Defense Points: " + selectedHero.getInt("defense"));
                    heroStats.append("\n");
                    heroStats.append(" Helm Points: " + selectedHero.getInt("helm"));
                    heroStats.append("\n");
                    heroStats.append(" Hit Points: " + selectedHero.getInt("hitpoints"));
                    heroStats.append("\n");
                    heroStats.append(" Level: " + selectedHero.getInt("level"));
                    heroStats.append("\n");
                    heroStats.append(" Experience: " + selectedHero.getInt("experience"));
                    setHero(controller.createHero(selectedHero.getString("name")));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,
                            ex.getMessage(),
                            "",
                            JOptionPane.ERROR_MESSAGE);
                    System.exit(-3);
                }
                availableHeroStats.setText(heroStats.toString());
            } else {
                playGameBtn.setEnabled(false);
            }
	}//GEN-LAST:event_availableHeroesItemStateChanged

	private void heroClassCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_heroClassCheckBoxItemStateChanged

            if (warriorCheckBox.isSelected()) {
                hunterCheckBox.setSelected(false);
                priestCheckBox.setSelected(false);
            }
            if (priestCheckBox.isSelected()) {
                warriorCheckBox.setSelected(false);
                hunterCheckBox.setSelected(false);
            }
            if (hunterCheckBox.isSelected()) {
                warriorCheckBox.setSelected(false);
                priestCheckBox.setSelected(false);
            }
	}//GEN-LAST:event_heroClassCheckBoxItemStateChanged

	private void startGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameBtnActionPerformed

            if (!heroName.getText().isEmpty()) {
                String heroClass = null;
                if (warriorCheckBox.isSelected()) {
                    heroClass = warriorCheckBox.getText();
                } else if (hunterCheckBox.isSelected()) {
                    heroClass = hunterCheckBox.getText();
                } else if (priestCheckBox.isSelected()) {
                    heroClass = priestCheckBox.getText();
                }
                if (heroClass != null) {
                    try {
                        if (controller.checkIfHeroNameExist(heroName.getText(), heroClass)) {
                            setHero(controller.createNewHero(heroName.getText(), heroClass));
                            if (hero != null) {
	                            startGameBtn.setVisible(false);
	                            mapPanel.setVisible(true);
	                            createNewHeroPanel.setVisible(false);
	                            guiGameInit();
	                            pack();
                            } else
                            	System.exit(0);
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "Please Pick A Different Hero Name..." + heroName.getText() + " Already Exists",
                                    "Hero Name",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    } catch (SQLException exception) {
                        JOptionPane.showMessageDialog(this,
                                exception.getMessage(),
                                "",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Please Pick A Hero Class For The Hero",
                            "Hero Class",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Hero Name Cannot Be Empty",
                        "Empty Hero Name",
                        JOptionPane.WARNING_MESSAGE);
            }
	}//GEN-LAST:event_startGameBtnActionPerformed

    private void droppedArtefactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_droppedArtefactBtnActionPerformed
        if (evt.getActionCommand().equals("Pick Up Artefact")) {
            try {
                controller.Equip(droppedArtefact);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Picking Up Artefact",
                        JOptionPane.ERROR_MESSAGE);
                System.exit(-2);
            }
        }
        enemyStats.setVisible(false);
        movementBtnPanel.setVisible(true);
    }//GEN-LAST:event_droppedArtefactBtnActionPerformed

    private void playGameBtnActionPerformed(java.awt.event.ActionEvent evt) {
	    if (hero != null) {
		    availableHeroPanel.setVisible(false);
		    mapPanel.setVisible(true);
		    guiGameInit();
	    } else
	    	System.exit(0);
    }

    private void movementBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String userInput = evt.getActionCommand();
        villainEncounter = controller.checkForEnemies(userInput, hero.getPosition());
        previousCoordinates = new Coordinates(hero.getPosition().getX(), hero.getPosition().getY());
        if (villainEncounter != null) {
            controller.Move(userInput);
            battleBtnPanel.setVisible(true);
            movementBtnPanel.setVisible(false);
            enemyStats.setVisible(true);
            runBtn.setVisible(true);
            DisplayEnemyStats(villainEncounter);
        } else {
            controller.Move(userInput);
            CheckIfGameIsWon();
        }
        printAndUpdateMap();
    }

    private void battleBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String userInput = evt.getActionCommand();
        if (userInput.equals("Fight")) {
            if (controller.simulateFight(villainEncounter)) {
                JOptionPane.showMessageDialog(this,
                        "You Won The Fight",
                        "Battle Outcome",
                        JOptionPane.INFORMATION_MESSAGE);
                try {
                    controller.updateHero();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                artefactDropped();
                villains =  controller.isHeroLevelUp();
                villains.remove(villainEncounter);
                battleBtnPanel.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this,
                        "You Lost The Fight",
                        "Battle Outcome",
                        JOptionPane.PLAIN_MESSAGE);
                System.exit(0);
            }
        } else if (userInput.equals("Run")) {
            if (controller.runOrFight(villainEncounter)) {
                JOptionPane.showMessageDialog(this,
                        "You Must Fight..",
                        "Fight Back",
                        JOptionPane.WARNING_MESSAGE);
                runBtn.setVisible(false);
            } else {
                enemyStats.setVisible(false);
                movementBtnPanel.setVisible(true);
	            battleBtnPanel.setVisible(false);
                hero.Run(previousCoordinates);
            }
        }
        CheckIfGameIsWon();
        printAndUpdateMap();
    }

    private void printAndUpdateMap() {
        mapSize = (((hero.getLevel() - 1) * 5) + (10 - (hero.getLevel() % 2)));
        map = new StringBuilder();
        for (int y = 0; y < mapSize; y++) {
            for (int x = 0; x < mapSize; x++) {
                if ((x == getHero().getPosition().getX()) && (y == getHero().getPosition().getY())) {
                    map.append("*");
                } else if (controller.getVillainsToDisplay(villains, x, y)) {
                    map.append("i");
                } else {
                    map.append(".");
                }
                map.append("  ");
            }
            map.append("\n");
        }
        mapTextArea.setText(map.toString());
        pack();
    }

    private void guiGameInit() {
        if (hero != null) {
            int startPosition = (((hero.getLevel() - 1) * 5) + (10 - (hero.getLevel() % 2))) / 2;
            hero.setPosition(new Coordinates(startPosition, startPosition));
            villains = controller.generateVillains();
            printAndUpdateMap();
        }
    }

    private void CheckIfGameIsWon() {
        int playerStartPosition;
        if (controller.GameWon()) {
            printAndUpdateMap();
            JOptionPane.showMessageDialog(this,
                    "You Reached The Border...So You Win The Game",
                    "Game Won",
                    JOptionPane.INFORMATION_MESSAGE);
            playerStartPosition = (((hero.getLevel() - 1) * 5) + (10 - (hero.getLevel() % 2))) / 2;
            hero.setPosition(new Coordinates(playerStartPosition, playerStartPosition));
        }
    }

    private void DisplayEnemyStats(Villain villain) {
        StringBuilder heroSats = new StringBuilder();
        heroSats.append("Name: " + villain.getName() + "\n");
        heroSats.append("Attack Points: " + villain.getAttack() + "\n");
        heroSats.append("Defense Points: " + villain.getDefense() + "\n");
        heroSats.append("Hit Points: " + villain.getHitPoints() + "\n");
        pickUpArtefactBtn.setVisible(false);
        leaveArtefactBtn.setVisible(false);
        enemyStatsTextArea.setText(heroSats.toString());
    }

    private void artefactDropped() {
        Artefact artefact = controller.generateRandomArtifact(villainEncounter);
        StringBuilder artefactStats = new StringBuilder();
        if (artefact != null) {
            pickUpArtefactBtn.setVisible(true);
            leaveArtefactBtn.setVisible(true);
            artefactStats.append(villainEncounter.getName() + " dropped an Artefact\n");
            artefactStats.append("Artefact Name: " + artefact.getName() + "\n");
            artefactStats.append("Type: " + artefact.getType() + "\n");
            artefactStats.append("Points: " + artefact.getPoints() + "\n");
            enemyStatsTextArea.setText(artefactStats.toString());
            droppedArtefact = artefact;
        } else {
            enemyStats.setVisible(false);
            movementBtnPanel.setVisible(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel availableHeroPanel;
    private javax.swing.JTextArea availableHeroStats;
    private javax.swing.JComboBox<String> availableHeroes;
    private javax.swing.JPanel battleBtnPanel;
    private javax.swing.JPanel btnContainer;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JButton createNewHeroBtn;
    private javax.swing.JPanel createNewHeroPanel;
    private javax.swing.JButton eastBtn;
    private javax.swing.JPanel enemyStats;
    private javax.swing.JTextArea enemyStatsTextArea;
    private javax.swing.JButton exitGame;
    private javax.swing.JButton fightBtn;
    private javax.swing.JTextField heroName;
    private javax.swing.JCheckBox hunterCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton leaveArtefactBtn;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JTextArea mapTextArea;
    private javax.swing.JPanel movementBtnPanel;
    private javax.swing.JButton northBtn;
    private javax.swing.JButton pickUpArtefactBtn;
    private javax.swing.JButton playGameBtn;
    private javax.swing.JCheckBox priestCheckBox;
    private javax.swing.JButton runBtn;
    private javax.swing.JButton selectExsitingHero;
    private javax.swing.JButton southBtn;
    private javax.swing.JButton startGameBtn;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JCheckBox warriorCheckBox;
    private javax.swing.JButton westBtn;
    // End of variables declaration//GEN-END:variables
}
